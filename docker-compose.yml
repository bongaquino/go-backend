services:
  # MongoDB
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./docker/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - network

  # Mongo Express (Web UI for MongoDB)
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo
    ports:
      - "8082:8081"
    networks:
      - network

  # Redis
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    command: redis-server --notify-keyspace-events AKE
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - network

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379"
    ports:
      - "8083:8081"
    networks:
      - network

  # Elasticsearch (ELK Stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - network

  # Logstash (ELK Stack)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: logstash
    volumes:
      - ./docker/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    depends_on:
      - elasticsearch
    ports:
      - "12201:12201/udp"
    networks:
      - network

  # Kibana (ELK Stack)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - network

  # API Gateway
  api-gateway:
    image: tykio/tyk-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway/apps:/opt/tyk-gateway/apps
      - ./api-gateway/middleware:/opt/tyk-gateway/middleware
      - ./api-gateway/tyk.conf:/opt/tyk-gateway/tyk.conf
    environment:
      TYK_GW_SECRET: "352d20ee67be67f6340b4c0605b044b7"
      TYK_GW_STORAGE_HOST: "redis"
      TYK_GW_STORAGE_PORT: "6379"
      TYK_GW_STORAGE_PASSWORD: ""
      TYK_GW_STORAGE_DB: "0"
    depends_on:
      - redis
    networks:
      - network

  # IAM Service
  iam-service:
    image: koneksi/services/iam:latest
    build:
      context: services/iam
      dockerfile: Dockerfile
    container_name: iam-service
    restart: unless-stopped
    env_file:
      - services/iam/.env
    volumes:
      - ./services/iam:/app
    depends_on:
      - mongo
    ports:
      - "3001:3001"
    networks:
      - network
    # logging:
    #   driver: "gelf"
    #   options:
    #     gelf-address: "udp://logstash:12201"
    #     tag: "orchestrator"

volumes:
  mongo-data:
  redis-data:
  elastic-data:

networks:
  network:
    driver: bridge
